# tests/test_settings.py
"""
Tests for the settings loading and validation logic.
"""

from pathlib import Path

import pytest
import tomlkit
from bitbot.settings import load_settings
from hypothesis import HealthCheck, given, settings
from hypothesis import strategies as st

# 1. Hypothesis Strategy: A "recipe" for generating valid config data.
# This strategy creates dictionaries that match the structure of our Pydantic models.
app_strategy = st.builds(
    dict,
    id=st.text(min_size=1, alphabet=st.characters(min_codepoint=97, max_codepoint=122)),
    display_name=st.text(min_size=1),
)

github_strategy = st.builds(
    dict,
    source_repo=st.text(min_size=1),
    bot_repo=st.text(min_size=1),
    asset_file_name=st.text(min_size=1),
)

reddit_strategy = st.builds(
    dict,
    subreddit=st.text(min_size=1),
    post_style=st.sampled_from(["landing_page", "direct_links"]),
    max_outbound_links_warning=st.integers(min_value=0),
    post_title_template=st.text(min_size=1),
    creator_username=st.text(min_size=1),
)

config_strategy = st.builds(
    dict,
    github=github_strategy,
    reddit=reddit_strategy,
    apps=st.lists(app_strategy, min_size=1),
)


# 2. Hypothesis Test: Validates the loader against many generated examples.
@given(config_data=config_strategy)
# It is safe to suppress this health check because we explicitly overwrite the
# file on each run of the test, so state does not leak between examples.
@settings(suppress_health_check=[HealthCheck.function_scoped_fixture])
def test_load_settings_with_valid_data(tmp_path: Path, config_data: dict):
    """
    Tests that the settings loader correctly parses any valid TOML configuration
    generated by our hypothesis strategy.
    """
    config_path = tmp_path / "config.toml"
    config_path.write_text(tomlkit.dumps(config_data))

    # The test passes if this runs without raising a Pydantic validation error
    settings = load_settings(config_path)

    # We can also assert that the data was loaded correctly
    assert settings.github.source_repo == config_data["github"]["source_repo"]
    assert len(settings.apps) == len(config_data["apps"])


# 3. Pytest Test: Validates a specific, known failure case.
def test_load_settings_file_not_found():
    """
    Tests that the settings loader raises a FileNotFoundError when the
    config file does not exist.
    """
    with pytest.raises(FileNotFoundError):
        load_settings(Path("non_existent_config.toml"))
