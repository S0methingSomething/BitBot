name: '[Release] Check for Updates, Patch, and Post'
on:
  workflow_dispatch:
  schedule:
    - cron: '5 * * * *'
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true
jobs:
  check_and_patch:
    name: 1. Check, Patch & Release
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.compare_versions.outputs.version }}
      direct_download_url: ${{ steps.set_url.outputs.direct_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          # We need to fetch all history to compare tags
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Read config.json into environment variables
        id: config
        uses: antifree/json-to-variables@v1
        with:
          filename: 'config.json'
      - name: Get Latest Source Release Data
        id: source_release
        run: |
          RELEASE_DATA=$(curl -sL \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ env.sourceRepo }}/releases/latest")
          
          TAG_NAME=$(echo "$RELEASE_DATA" | jq -r .tag_name)
          BODY=$(echo "$RELEASE_DATA" | jq -r .body)
          
          if [[ "$TAG_NAME" == "null" || -z "$TAG_NAME" ]]; then
            echo "::error::Could not fetch latest release data from ${{ env.sourceRepo }}."
            exit 1
          fi

          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          EOF=$(openssl rand -hex 16)
          echo "body<<$EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT
      - name: Parse Version
        id: parse_version
        run: |
          VERSION=$(echo "${{ steps.source_release.outputs.body }}" | grep -oP '(?<=v)\d+\.\d+\.\d+')
          if [[ -z "$VERSION" ]]; then echo "::error::Could not parse version from release body."; exit 1; fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      - name: Get Latest Bot Release
        id: bot_release
        run: TAG=$(curl -sL "https://api.github.com/repos/${{ env.botRepo }}/releases/latest" | jq -r .tag_name) && echo "tag=$TAG" >> $GITHUB_OUTPUT
      - name: Compare Versions
        id: compare_versions
        run: |
          # The tag from the bot release will include the 'v'
          if [[ "v${{ steps.parse_version.outputs.version }}" == "${{ steps.bot_release.outputs.tag }}" ]]; then
            echo "No new version. Stopping."
            exit 1
          fi
          echo "version=${{ steps.parse_version.outputs.version }}" >> $GITHUB_OUTPUT
      - name: Create working directory
        run: mkdir -p ./dist
      - name: Download & Process File
        run: |
          ASSET_ID=$(curl -sL -H "Accept: application/vnd.github+json" "https://api.github.com/repos/${{ env.sourceRepo }}/releases/latest" | jq --arg NAME "${{ env.assetName }}" '.assets[] | select(.name == $NAME) | .id')
          if [[ -z "$ASSET_ID" || "$ASSET_ID" == "null" ]]; then echo "::error::Could not find asset named '${{ env.assetName }}'."; exit 1; fi
          
          curl -sL -J -H "Accept: application/octet-stream" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -o "./dist/original_${{ env.assetName }}" "https://api.github.com/repos/${{ env.sourceRepo }}/releases/assets/$ASSET_ID"
          node process_vars.js ./dist/original_${{ env.assetName }} ./dist/${{ env.assetName }}
      - name: Create Git Tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ steps.compare_versions.outputs.version }}" -m "Release v${{ steps.compare_versions.outputs.version }}"
          git push origin "v${{ steps.compare_versions.outputs.version }}"
      - name: Create Release and Upload Asset
        id: create_and_upload
        run: |
          RELEASE_NAME="${{ env.assetName }} v${{ steps.compare_versions.outputs.version }}"
          RELEASE_BODY="Automated release of the pre-patched \`${{ env.assetName }}\` file. All boolean values have been set to true."
          
          CREATE_DATA=$(printf '{"tag_name": "v%s", "name": "%s", "body": "%s"}' \
            "${{ steps.compare_versions.outputs.version }}" "$RELEASE_NAME" "$RELEASE_BODY")
            
          RELEASE_RESPONSE=$(curl -sL \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -d "$CREATE_DATA" \
            "https://api.github.com/repos/${{ env.botRepo }}/releases")
          
          UPLOAD_URL=$(echo "$RELEASE_RESPONSE" | jq -r .upload_url)
          if [[ "$UPLOAD_URL" == "null" || -z "$UPLOAD_URL" ]]; then echo "::error::Failed to create release. The API response was: $RELEASE_RESPONSE"; exit 1; fi

          ASSET_NAME="${{ env.assetName }}"
          ASSET_PATH="./dist/${ASSET_NAME}"
          UPLOAD_URL_TEMPLATE=$(echo $UPLOAD_URL | sed 's/{?name,label}//')

          curl -sL \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary "@$ASSET_PATH" \
            "$UPLOAD_URL_TEMPLATE?name=$ASSET_NAME"
      - name: Set Direct Download URL
        id: set_url
        run: echo "direct_url=https://github.com/${{ env.botRepo }}/releases/download/v${{ steps.compare_versions.outputs.version }}/${{ env.assetName }}" >> $GITHUB_OUTPUT
  post_and_handoff:
    name: 2. Post to Reddit & Update State
    needs: check_and_patch
    runs-on: ubuntu-latest
    permissions: { contents: write }
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with: { python-version: '3.10' }
      - run: pip install -r requirements.txt
      - name: Post to Reddit and Update State
        env:
          REDDIT_CLIENT_ID: ${{ secrets.REDDIT_CLIENT_ID }}
          REDDIT_CLIENT_SECRET: ${{ secrets.REDDIT_CLIENT_SECRET }}
          REDDIT_USERNAME: ${{ secrets.REDDIT_USERNAME }}
          REDDIT_PASSWORD: ${{ secrets.REDDIT_PASSWORD }}
          REDDIT_USER_AGENT: ${{ secrets.REDDIT_USER_AGENT }}
        run: python post_to_reddit.py "${{ needs.check_and_patch.outputs.new_version }}" "${{ needs.check_and_patch.outputs.direct_download_url }}"
      - name: Commit state file with new Post ID
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "feat(bot): start monitoring new post [skip ci]"
          file_pattern: "bot_state.json"
